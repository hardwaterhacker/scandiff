<#

.SYNOPSIS
This script uses nmap to identify live targets, scan them, and email the results.

.DESCRIPTION
This script runs nmap against a provided set of targets, diffs against any 
previous results, and emails the results to an email address specified in the
script.

.PARAMETER frequency
Frequency is either daily or weekly.

Daily performs discovery using a limited set of ports and performs an nmap scan
using the default nmap port list.

Weekly performs a discovery using a limited set of ports and performs an nmap 
scan using the full TCP port range and a limited set of UDP ports defined in
the script.

.PARAMETER basename
The basename parameter specifies the base name used for all output files.  If 
basename is not provided, the basename defaults to MM-DD-YYYY.  NOTE: this will 
cause ndiff to falsely determine no previous nmap results exist, thus the 
specification of a basename is recommended.

.PARAMETER targets
This is the host or hosts to be scanned using the nmap-style host declaration,
e.g. 192.168.1.10-25, 192.168.1.0/24, hostname.domain.tld, or a comma-separated
combination of targets.

The full path to an file containing hosts to be scanned can also be used. If the
target file is not in your current directory, you must pass the full path.

.PARAMETER email
This parameter determines whether the script should send email or not.
    1 - Enable email output
    0 - Suppress email output

.PARAMETER outdir
This parameter designates the output directory for all files generated by this script.
If not supplied, defaults to directory where this script resides.

.PARAMETER discover
This parameter controls whether discovery is performed or not.  Discovery will be performed if
set to 1 or $True

.EXAMPLE
./scandiff.ps1 -frequency daily -basename nmap-output -targets 192.168.1.10-25,scanme.nmap.org
.EXAMPLE
./scandiff.ps1 -frequency daily -basename nmap-output -targets c:\targets.txt

.NOTES

IMPORTANT! This performs a discovery scan looking for open ports first,before doing a scan using
    the default nmap portlist. This is done to speed up scanning across large IP spaces. If no
    open ports are discovered, this script will assume there are no live hosts and will exit.

Assumptions:
    nmap: Assume this is installed at C:\Program Files (x86)\Nmap\nmap.exe
    ndiff: Assume this is installed at C:\Program Files (x86)\Nmap\ndiff.exe
    7Zip: Assume this is installed at C:\Program Files\7-Zip\7z.exe
        
    This script assumes you've copied out previous data if you want to keep it. Output files will
    be removed each time this script is run and replaced with new files with the exception of the
    diff file.  This file will be kept to compare against previous runs.

TO-DO:
    Ability to read config options from a config file
    Option to suppress zip output

.LINK
https://github.com/hardwaterhacker/scandiff

#>

param (
    [string]$frequency = $(throw "frequency is required: daily or weekly"),
    [string]$basename = (Get-Date).ToShortDateString().Replace('/', '-'),
    [string]$outdir = (Split-Path -Parent $MyInvocation.MyCommand.Path),
    [string]$targets = $(throw "Please provide hosts to be scanned (nmap-style hosts definition)."),
    [bool]$email = 1,
    [bool]$discover = 1
 )

function getLiveHosts($file) {

    [System.Xml.XmlDocument] $xd = New-Object System.Xml.XmlDocument
    $xd.load($file)
    $nodelist = $xd.SelectNodes("/nmaprun")
    
    $candidates = @()
    foreach ($hostnode in $xd.GetElementsByTagName("host")) {

        foreach ( $portnode in $hostnode.GetElementsByTagName("port")) {
            
            if (($portnode.SelectSingleNode("state").getAttribute("state") -eq "open") -or ($portnode.SelectSingleNode("state").getAttribute("state") -eq "open")) {
                $IP = ([string]$hostnode.SelectSingleNode("address").getAttribute("addr"))
                
                if (!$candidates.Contains($IP)) {
                    $candidates += ,$IP
                    }
             }
        }
    }
    if ( $candidates.Count-eq 0 ) {
        Write-Host "No hosts discovered.  Quitting!"
        exit
    }

    return $candidates

}

function scanHosts($scanArgs) {
    echo "*******************************`n" | Out-File -Append -encoding ascii -FilePath $logfile
    echo $timeStamp | Out-File -Append -encoding ascii -FilePath $logfile
    echo "Starting nmap scan..." | Out-File -Append -encoding ascii -FilePath $logfile
    echo "$nmap $scanArgs `n" | Out-File -Append -encoding ascii -FilePath $logfile
    echo "*******************************`n" | Out-File -Append -encoding ascii -FilePath $logfile
    Invoke-Expression "& '$nmap' $scanArgs" | Out-File -Append -encoding ascii -FilePath $logfile
    echo "Scan complete`n" | Out-File -Append -encoding ascii -FilePath $logfile
    echo "*******************************`n" | Out-File -Append -encoding ascii -FilePath $logfile
}

function Get-ScriptDirectory {
    $Invocation = (Get-Variable MyInvocation -Scope 1).Value;
    if($Invocation.PSScriptRoot)
    {
        $Invocation.PSScriptRoot;
    }
    Elseif($Invocation.MyCommand.Path)
    {
        Split-Path $Invocation.MyCommand.Path
    }
    else
    {
        $Invocation.InvocationName.Substring(0,$Invocation.InvocationName.LastIndexOf("\"));
    }
}

function doNdiff($outputFile) {
    $outputFile = $outputFile.split(' ')[1]
    $prevFile = $outputDir + $basename + "-nmap-prev.xml"
    $diffFile = $outputDir + $basename + "-nmap-diff.txt"
 
    $ndiffCmd = "& '$ndiff' $prevFile $outputFile"
    if ( Test-Path $prevFile ) { 
        if ( Test-Path $diffFile) { 
            Remove-Item $diffFile #clear diff file if it exists
            }
        Invoke-Expression $ndiffcmd | Out-File -encoding ascii -FilePath $diffFile
    }
    else {
        echo "`n     No previous diff file to compare against!`n" | Out-File -Append -encoding ascii -FilePath $logfile
    }

    # remove old xml file, rename current file to -prev.xml
    if ( Test-Path $prevFile ) { 
        Remove-Item $prevFile 
        }
    Rename-Item $outputFile $prevFile
}

function zipFiles($outputDir) {
    $cwd = Get-ScriptDirectory
    cd $outputDir
    $zipFile = $outputDir + $basename + "-nmap"
    if ( Test-Path "$zipFile.7z" ) {
        Remove-Item "$zipFile.7z"
        }

    $7zargs = "a $zipFile $basename-discover.xml $basename-nmap-prev.xml $basename-targets.csv $basename-nmap-diff.txt $basename-nmap.log -p$zipPass"
    $7zcmd = "& '$7zexe' $7zargs"
    Invoke-Expression $7zcmd | Out-Null
    cd $cwd
    }

function sendMail($outputDir) {
    $EmailFrom = “emailfrom@domain.com”
    $EmailTo = “emailto@domain.com”
    $Subject = “$frequency Nmap scan results”
    $Body = @"

The results for the $frequency Nmap scan and diffs for $targets are attached.

"@
    $zipFile = $basename + "-nmap.7z"
    $attachment = $outputDir + $zipFile
    $SMTPServer = “smtp.gmail.com”
    $SMTPMessage = New-Object System.Net.Mail.MailMessage($EmailFrom,$EmailTo,$Subject,$Body)
    $SMTPMessage.Attachments.Add($attachment)
    $SMTPClient = New-Object Net.Mail.SmtpClient($SMTPServer,587)
    $SMTPClient.EnableSsl = $True
    $SMTPClient.Credentials = New-Object System.Net.NetworkCredential("emailfrom", "gmailAppPass");
    $SMTPClient.Send($SMTPMessage)
}

# Set up variables used by mutliple functions
$timeStamp = Get-Date
$date = $timeStamp.ToShortDateString().Replace('/', '-')
$scanOpts = "-sS -sU -Pn -T4 -v"
$nmap = "C:\Program Files (x86)\Nmap\nmap.exe" 
$ndiff = "C:\Program Files (x86)\Nmap\ndiff.exe"
$7zexe = "C:\Program Files\7-Zip\7z.exe"
$zipPass = "setYourZipPassHere"  # Change this to set your own password

# Test if output directory exists
# Set up output directory
if ( Test-Path $outdir ) {
    if ( $outdir.EndsWith("\") ) {
            $outputDir = $outdir
        }
    else {
            $outputDir = $outdir + "\"
        }
    }
else
    { 
    Write-Host "`n`nFatal! $outdir does not exist. Please provide a valid path.`n`n" -ForegroundColor Red
    exit
}

# Set up logfile
$logfile = $outputDir + "$basename-nmap.log"
    if ( Test-Path $logfile ) {
        Remove-Item $logfile
        }

# run scan here, this is where the magic happens

if ( Test-Path $targets ) {
    # File containing targets was specified
    $targets = "-iL " + $targets
    }

if ( $discover ) {
    ## Start of discovery section

    # define the ports and outputFile for a discovery scan
    # CHANGE THESE PORTS
    # Tune to test for known ports on your network to increase discovery accuracy
    $ports = '"-p U:53,123,259-260,2746,5004,8116,T:21,22,25,53,80,256-265,443,465,900,981,1720,5060,8080,8443,18210-18212,18262-18265"'
    $outputFile = "-oX " + $outputDir + $basename + "-discover.xml"

    # Perform a discovery scan
    scanHosts($scanOpts, $ports, $outputFile, $targets)
    $liveHosts = getLiveHosts($outputFile.split(" ")[1])
    $liveHostsFile = $outputDir + $basename + "-targets.csv"
    
    # remove stale targets file if it exists
    if ( Test-Path $liveHostsFile ) {
        Remove-Item $liveHostsFile
        }
    
    #write the targets to the target file
    foreach ($liveHost in $liveHosts) {
        Add-Content $liveHostsFile ([string]$liveHost)
        }
        
    ## need to pass targets as an input file using -iL
    ## $nmapTargets will replace $scanRange for nmap targets definition
    $nmapTargets = "-iL " + $liveHostsFile

    ## End of discovery section
}
else {
    # Discovery skipped.  set $nmapTargets to $targets
    $nmapTargets = $targets
    echo "*******************************`n" | Out-File -Append -encoding ascii -FilePath $logfile
    echo "`n     Target discovery skipped.`n"| Out-File -Append -encoding ascii -FilePath $logfile
    echo "*******************************`n" | Out-File -Append -encoding ascii -FilePath $logfile
}

    ## Port scan sction
    # Set options based on $frequency
    if ($frequency -eq "daily") {
        $ports = ""
        $outputFile = "-oX " + $outputDir + $basename + "-daily.xml"
        }
    elseif ($frequency -eq "weekly") {
        $ports = "-p U:53,123,259-260,2746,5004,8116,T:1-65535"
        $outputFile = "-oX " + $outputDir + "weekly\" + $basename + "-weekly.xml"
        }


    ## add -sV to $scanOpts for service version detection
    $scanOpts += " -sV"

    scanHosts($scanOpts, $ports, $outputFile, $nmapTargets)
    doNdiff($outputFile)

# We're done here.  Send mail and shut down.
zipFiles($outputDir)
if ( $email ) {
    sendMail($outputDir)
    }
else { exit }
